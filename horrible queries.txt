#include <bits/stdc++.h>
#define f(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define readv(v,a,b) for(int i=a;i<b;i++) cin>>v[i]
#define printv(v,a,b) for(int i=a;i<b;i++) cout<<v[i]<<" "
#define ull unsigned long long
#define F(i,a,b) for(int i=a;i>=b;i--)
#define vc vector<int>
#define sortall(v) sort(v.begin(),v.end())
using namespace std;
struct segtree
{
  vector<ll>tree;
  vector<ll>lazy;
  int size;
  void init(int n)
  {
    size=n;
    tree.assign(4*n,0);
    lazy.assign(4*n,0);
  }
  void update(int p,int q,int v,int curr,int st,int en)
  {
    if(lazy[curr]!=0)
    {
      tree[curr]+=1ll*(en-st+1)*lazy[curr];
      if(st!=en)
      {
        lazy[2*curr+1]+=lazy[curr];
        lazy[2*curr+2]+=lazy[curr];
      }
      lazy[curr]=0;
    }
    if(st>q||en<p||en<st) return;
    if(st>=p&&en<=q)
    {
      tree[curr]+=1ll*(en-st+1)*v;
       if(st!=en)
      {
        lazy[2*curr+1]+=v;
        lazy[2*curr+2]+=v;
      }

      return;
    }
    int mid=(st+en)/2;
    update(p,q,v,2*curr+1,st,mid);
    update(p,q,v,2*curr+2,mid+1,en);
    tree[curr]=tree[2*curr+1]+tree[2*curr+2];
    
  }
  void update(int p,int q,int v)
  {
    update(p,q,v,0,0,size-1);
  }
  ll getsum(int p,int q,int curr,int st,int en )
  {
       if(lazy[curr]!=0)
    {
      tree[curr]+=1ll*(en-st+1)*lazy[curr];
      if(st!=en)
      {
        lazy[2*curr+1]+=lazy[curr];
        lazy[2*curr+2]+=lazy[curr];
      }
      lazy[curr]=0;
    }
     if(st>q||en<p||en<st) return 0;
     if(st>=p&&en<=q) return tree[curr];
     int mid=(st+en)/2;
     return getsum(p,q,2*curr+1,st,mid)+getsum(p,q,2*curr+2,mid+1,en);
  }
  ll getsum(int p,int q)
  {
    return getsum(p,q,0,0,size-1);
  }
};

int main()
{
      ios_base::sync_with_stdio(false);
      cin.tie(NULL);
  #ifndef ONLINE_JUDGE
  freopen("input.txt","r",stdin);
  freopen("o1.txt","w",stdout);
  #endif
  clock_t time_req; 
  time_req = clock(); 
 
    int t;
    cin>>t;
    while(t--)
    {
      int n,c;
      cin>>n>>c;
      segtree s;
      s.init(n);
      int type,p,q,v;
      while(c--)
      {
        cin>>type>>p>>q;
        if(type==0)
        {
          cin>>v;
            s.update(p-1,q-1,v);
        }
        else
        {
          cout<<s.getsum(p-1,q-1)<<'\n';
        }
      }
    }
    // time_req = clock() - time_req; 
   /* cout << "Processor time taken in pow function: "
        << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl; */
  return 0;
}
